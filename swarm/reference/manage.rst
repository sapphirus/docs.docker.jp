.. -*- coding: utf-8 -*-
.. URL: https://docs.docker.com/swarm/reference/manage/
.. SOURCE: https://github.com/docker/swarm/blob/master/docs/reference/manage.md
   doc version: 1.11
      https://github.com/docker/swarm/commits/master/docs/reference/manage.md
.. check date: 2016/04/29
.. Commits on Mar 4, 2016 4b8ed91226a9a49c2acb7cb6fb07228b3fe10007
.. -------------------------------------------------------------------

.. manage — Create a Swarm manager

.. _manage-create-a-swarm-manager:

===================================================
manage - Swarm マネージャの作成
===================================================

.. Prerequisite: Before using manage to create a Swarm manager, establish a discovery backend as described in this discovery topic.

動作条件：Swarm マネージャで ``manage`` を使う前に、 :doc:`こちらのディスカバリのドキュメント </swarm/discovery>` に書かれているディスカバリ・バックエンドを構築します。

.. The manage command creates a Swarm manager whose purpose is to receive commands on behalf of the cluster and assign containers to Swarm nodes. You can create multiple Swarm managers as part of a high-availability cluster.

``manage`` コマンドは Swarm マネージャを作成します。マネージャはクラスタに対するコマンド受信と、Swarm ノードにコンテナを割り当てる役割があります。高可用性クラスタ用に複数の Swarm マネージャの作成も可能です。

.. To create a Swarm manager, use the following syntax:

Swarm マネージャを作成するには、以下の構文を使います。

.. code-block:: bash

   $ docker run swarm manage [OPTIONS] <discovery>

.. For example, you can use manage to create a Swarm manager in a high-availability cluster with other managers:

例えば、Swarm マネージャを ``manage`` で作成時に、他のマネージャと高可用性クラスタを形成するには、次のように実行します。

.. code-block:: bash

   $ docker run -d -p 4000:4000 swarm manage -H :4000 --replication --advertise 172.30.0.161:4000 consul://172.30.0.165:8500

.. Or, for example, you can use it to create a Swarm manager that uses Transport Layer Security (TLS) to authenticate the Docker Client and Swarm nodes:

あるいは、Swarm マネージャ作成時、Docker クライアントと Swarm ノード間で TLS 認証を有効にするには、次のように実行します。

.. code-block:: bash

   $ docker run -d -p 3376:3376 -v /home/ubuntu/.certs:/certs:ro swarm manage --tlsverify --tlscacert=/certs/ca.pem --tlscert=/certs/cert.pem --tlskey=/certs/key.pem --host=0.0.0.0:3376 token://$TOKEN

.. .Argument

.. _swarm-create-argument:

引数
==========

.. The manage command has only one argument:

``manage`` コマンドは引数を１つだけ指定できます。

.. <discovery> — Discovery backend

<discovery> - ディスカバリ・バックエンド
----------------------------------------

.. Before you create a Swarm manager, create a discovery token or set up a discovery backend for your cluster.

Swarm マネージャを作成する前に、 :doc:`ディスカバリ・トークンの作成 <create>` と :doc:`ディスカバリ・バックエンドのセットアップ </swarm/discovery>` が必要です。

.. When you create the swarm node, use the <discovery> argument to specify one of the following discovery backends:

Swarm ノードの作成時、 ``<discovery>`` を使って以下のバックエンドを指定可能です。

* ``token://<token>``
* ``consul://<ip1>/<path>``
* ``etcd://<ip1>,<ip2>,<ip2>/<path>``
* ``file://<path/to/file>``
* ``zk://<ip1>,<ip2>/<path>``
* ``[nodes://]<iprange>,<iprange>``

.. Where:

それぞれの項目は：

..    <token> is a discovery token generated by Docker Hub’s hosted discovery service. To generate this discovery token, use the create command. > Warning: Docker Hub’s hosted discovery backend is not recommended for production use. It’s intended only for testing/development.

* ``<token>`` はDocker Hub のホステッド・ディスカバリ・サービスによって生成されるトークンです。このトークンを作成するには ``create`` コマンドを使います。

..    ip1, ip2, ip3 are each the IP address and port numbers of a discovery backend node.

* ``ip1`` 、 ``ip2`` 、 ``ip3`` はディスカバリ・バックエンド用ノードの IP アドレスとポート番号を指定します。

..    path (optional) is a path to a key-value store on the discovery backend. When you use a single backend to service multiple clusters, you use paths to maintain separate key-value stores for each cluster.

* ``path`` （オプション）はディスカバリ・バックエンドのキーバリュー・ストアのパスを指定します。複数のクラスタを１つのバックエンドで管理する場合は、各クラスタごとにキーバリューのペアを記述する必要があります。

..     path/to/file is the path to a file that contains a static list of the Swarm managers and nodes that are members the cluster.

* ``path/to/file`` はSwarm マネージャとクラスタのメンバであるノード情報の一覧と、それぞれの静的な IP アドレスのリストを指定したファイルのパスを指定します。

..    iprange is an IP address or a range of IP addresses followed by a port number.

* ``iprange``  は特定のポート番号を利用する IP アドレスの範囲を指定します。

.. Here are a pair of <discovery> argument examples:

以下は ``<discovery>`` 引数の指定例です：

..    A discovery token: token://0ac50ef75c9739f5bfeeaf00503d4e6e
    A Consul node: consul://172.30.0.165:8500

* ディスカバリ・トークン： ``token://0ac50ef75c9739f5bfeeaf00503d4e6e``
* Consul ノード： ``consul://172.30.0.165:8500``

.. The environment variable for <discovery> is $SWARM_DISCOVERY.

``<discovery>`` は環境変数 ``$SWARM_DISCOVERY`` でも指定可能です。

.. For more information and examples, see the Docker Swarm Discovery topic.

より詳しい情報やサンプルについては、 :doc:`/swarm/discovery` をご覧ください。

.. Options

オプション
==========

.. The manage command has the following options:

``manage`` コマンドには以下のオプションがあります：

.. --strategy — Scheduler placement strategy

``strategy`` - スケジュール先のストラテジ
--------------------------------------------------

.. Use --strategy "<value>" to tell the Docker Swarm scheduler which placement strategy to use.

``--strategy "<値>"`` を使い、 Docker Swarm スケジューラに対して何のストラテジを使うか指定します。

.. Where <value> is:

``"値"`` の場所には：

..    spread — Assign each container to the Swarm node with the most available resources.
    binpack - Assign containers to one Swarm node until it is full before assigning them to another one.
    random - Assign each container to a random Swarm node.

* ``spread`` - 最も利用可能なリソースが多い Swarm ノードに対し、各コンテナを割り当てます。
* ``binpack`` - 割り当てられた Swarm ノードのリソースが溢れる前に、別のノードに割り当てます。
* ``random`` - ランダムな Swarm ノードにコンテナを割り当てます。

.. By default, the scheduler applies the spread strategy.

デフォルトでは、スケジューラは ``spread`` ストラテジを使います。

.. For more information and examples, see Docker Swarm strategies.

より詳しい情報はや例は :doc:`Docker Swarm ストラテジ </swarm/scheduler/strategy>` をご覧ください。

.. --filter, -f — Scheduler filter

``--filter`` 、 ``-f`` - スケジューラ・フィルタ
--------------------------------------------------

.. Use --filter <value> or -f <value> to tell the Docker Swarm scheduler which nodes to use when creating and running a container.

``--filter <値>`` もしくは ``-f <値>`` で、コンテナを作成・実行時、どのノードを使うかを Docker Swarm スケジューラに対して指定します。

.. Where <value> is:

``<値>`` の場所には：

..    health — Use nodes that are running and communicating with the discovery backend.
    port — For containers that have a static port mapping, use nodes whose corresponding port number is available (i.e., not occupied by another container or process).
    dependency — For containers that have a declared dependency, use nodes that already have a container with the same dependency.
    affinity — For containers that have a declared affinity, use nodes that already have a container with the same affinity.
    constraint — For containers that have a declared constraint, use nodes that already have a container with the same constraint.


* ``health`` - ディスカバリ・バックエンドと通信可能な実行中ノードを使います。
* ``port`` - コンテナにポートを割り当てるために、適切なポート番号が利用可能なノード（つまり、他のコンテナやプロセスにポートが専有されていない環境）を使います。
* ``dependency`` - 依存関係を宣言しているコンテナの場合、依存関係のあるコンテナが起動しているノードを使います。
* ``affinity`` - アフィニティが宣言されたコンテナの場合は、アフィニティが同一のノードを使います。
* ``constraint`` - 制約（constraint）が宣言されたコンテナの場合は、同一の制約を持つノードを使います。

.. You can use multiple scheduler filters, like this:

複数のスケジューラ・フィルタを使うには、次のようにします。

.. code-block:: bash

   --filter <value> --filter <value>

.. For more information and examples, see Swarm filters.

より詳しい情報や例は :doc:`Swarm フィルタ </swarm/scheduler/filter>` をご覧ください。

.. --host, -H — Listen to IP/port

``--host`` , ``-H`` - リッスンする IP／ポート
--------------------------------------------------

.. Use --host <ip>:<port> or -H <ip>:<port> to specify the IP address and port number to which the manager listens for incoming messages. If you replace <ip> with zeros or omit it altogether, the manager uses the default host IP. For example, --host=0.0.0.0:3376 or -H :4000.

``--host <IP>:<ポート>`` もしくは ``-H <ip>:<ポート>`` を使い、マネージャがメッセージを受信するための IP アドレスとポート番号を指定します。 ``ip`` の部分に 0 を使うか省略したら、manager はデフォルトのホスト IP を使います。例： ``--host=0.0.0.0:3376`` または ``-H :4000`` 。

.. The environment variable for --host is $SWARM_HOST.

``--host`` は環境変数 ``$SWARM_HOST`` でも指定できます。

.. --replication — Enable Swarm manager replication

``--replication`` - Swarm マネージャ複製の有効化
--------------------------------------------------

.. Enable Swarm manager replication between the primary and secondary managers in a high-availability cluster. Replication mirrors cluster information from the primary to the secondary managers so that, if the primary manager fails, a secondary can become the primary manager.

高可用性クラスタでは、プライマリとセカンダリ・マネージャ間で、Swarm マネージャの複製（レプリケーション）を可能にします。プライマリからセカンダリにクラスタ情報のミラーを複製します。つまりプライマリ・マネージャで障害が起これば、セカンダリがプライマリ・マネージャになれます。

.. --replication-ttl — Leader lock release time on failure

``--replication-ttl`` - リーダー障害発生時のロック解除時間
------------------------------------------------------------

.. Use --replication-ttl "<delay>s" to specify the delay, in seconds, before notifying secondary managers that the primary manager is down or unreachable. This notification triggers an election in which one of the secondary managers becomes the primary manager. By default, the delay is 15 seconds.

``--replication-ttl "<遅延>s"`` を使い、遅延時間を秒で指定します。これはセカンダリ・マネージャがプライマリ・マネージャがダウンまたは到達可能と通知する時間です。この通知をトリガとして、セカンダリ・マネージャの誰がプライマリ・マネージャになるのか選出されます。デフォルトの遅延は 15 秒です。

.. --advertise, --addr — Advertise Docker Engine’s IP and port number

``--advertise`` , ``--addr`` - Docker Engine のアドバタイズ用 IP とポート番号
--------------------------------------------------------------------------------

.. Use --advertise <ip>:<port> or --addr <ip>:<port> to advertise the IP address and port number of the Docker Engine. For example, --advertise 172.30.0.161:4000. Other Swarm managers MUST be able to reach this Swarm manager at this address.

``--advertise <ip>:<ポート>`` か ``--addr <ip>:<ポート>`` を使い Docker Engine のアドバタイズ（Advertise; 周知用） IP アドレスとポート番号を指定します。例： ``--advertise 172.30.0.161:4000``  。他の Swarm マネージャは、対象の Swarm マネージャに接続するため、ここで指定した IP アドレスとポート番号を使う必要があります。

.. The environment variable for --advertise is $SWARM_ADVERTISE.

``--advertise`` は環境変数 ``$SWARM_ADVERTISE`` でも指定できます。

.. --tls — Enable transport layer security (TLS)

``--tls`` - TLS の有効化
------------------------------

.. Use --tls to enable transport layer security (TLS). If you use --tlsverify, you do not need to use --tls.

``--tls`` を使い TLS（トランスポート・レイヤ・セキュリティ）を有効化します。 ``--tlsverify`` を使う場合は ``--tls`` の使用は不要です。

.. --tlscacert — Path to a CA’s public key file

``--tlscacert`` - 証明局(CA) の公開鍵ファイルのパス
------------------------------------------------------------

.. Use --tlscacert=<path/file> to specify the path and filename of the public key (certificate) from a Certificate Authority (CA). For example, --tlscacert=/certs/ca.pem. When specified, the manager trusts only remotes that provide a certificate signed by the same CA.

``--tlscacert=<path/file>`` を使い証明局（CA）用の公開鍵（証明書）のパスとファイル名を指定します。例： ``--tlscacert=/certs/ca.pem`` 。指定したら、マネージャが信頼するのは、同じ証明局で署名された証明書を使っているリモート環境のみです。

.. --tlscert — Path to the node’s TLS certificate file

``--tlscert`` - ノードの TLS 証明書ファイルのパス
--------------------------------------------------

.. Use --tlscert to specify the path and filename of the manager’s certificate (signed by the CA). For example, --tlscert=/certs/cert.pem.

``--tlskey`` を使い、マネージャの証明書（CAによって署名済み）のファイル名とパスを指定します。例： ``--tlskey=/certs/key.pem`` 。

.. --tlskey — Path to the node’s TLS key file

``--tlskey`` - ノードの TLS 鍵ファイルのパス
--------------------------------------------------

.. Use --tlskey to specify the path and filename of the manager’s private key (signed by the CA). For example, --tlskey=/certs/key.pem.

``--tlskey`` を使いマネージャの秘密鍵（CAによって署名済み）のファイル名とパスを指定します。例： ``--tlskey=/certs/key.pem`` 。

.. --tlsverify — Use TLS and verify the remote

``--tlsverify`` - TLS を使いリモート環境を確認
--------------------------------------------------

.. Use --tlsverify to enable transport layer security (TLS) and accept connections from only those managers, nodes, and clients that have a certificate signed by the same CA. If you use --tlsverify, you do not need to use --tls.

``--tlsverify`` を使いTLS 通信を有効化し、同一の証明局（CA）で署名された証明書を持っているマネージャ、ノード、クライアントのみ通信を許可します。 ``--tlsverify`` を使えば、 ``--tls`` を使う必要はありません。

.. --engine-refresh-min-interval — Set engine refresh minimum interval

``--engine-refresh-min-interval``  - Engine の最小リフレッシュ間隔を指定
------------------------------------------------------------------------

.. Use --engine-refresh-min-interval "<interval>s" to specify the minimum interval, in seconds, between Engine refreshes. By default, the interval is 30 seconds.

``--engine-refresh-min-interval "<間隔>s"`` を使い、Engine を例フレッシュするまでの最小間隔を秒単位で指定します。デフォルトでは、この間隔は 30 秒です。

..    When the primary manager in performs an Engine refresh, it gets updated information about an Engine in the cluster. The manager uses this information to, among other things, determine whether the Engine is healthy. If there is a connection failure, the manager determines that the node is unhealthy. The manager retries an Engine refresh a specified number of times. If the Engine responds to one of the retries, the manager determines that the Engine is healthy again. Otherwise, the manager stops retrying and ignores the Engine.

.. note::

   プライマリ・マネージャが Engine をリフレッシュするというのは、クラスタ上にある Engine の情報を更新することです。マネージャはこの情報を Engine が正常（healthy）かどうか決めるために使います。接続できなければ、マネージャは対象ノードを障害（unhealthy）とみなします。マネージャは指定した間隔ごとに再度 Engine 情報の更新を試みます。規定回数の再試行して Engine が応答するのであれば、再び Engine を正常（healthy）とみなします。もしそうでなければ、マネージャは再試行を停止し、対象の Engine を無視します。

.. --engine-refresh-max-interval — Set engine refresh maximum interval

``--engine-refresh-max-interval`` - Engine の最大リフレッシュ間隔を指定
-----------------------------------------------------------------------

.. Use --engine-refresh-max-interval "<interval>s" to specify the minimum interval, in seconds, between Engine refresh. By default, the interval is 60 seconds.

``--engine-refresh-max-interval "<間隔>秒"`` を使い、リフレッシュまでの最大間隔を秒単位で指定します。デフォルトでは、この間隔は 60 秒です。

.. --engine-failure-retry — Set engine failure retry count

``--engine-failure-retry`` - Engine のリトライ失敗回数
------------------------------------------------------------

.. Use --engine-failure-retry "<number>" to specify the number of retries to attempt if the engine fails. By default, the number is 3 retries.

``--engine-failure-retry "数値"`` を使い、Engine が障害とみなすまでの再試行の回数を指定します。デフォルトでは、3回再試行します。

.. .. --engine-refresh-retry — Deprecated

``--engine-refresh-retry`` - 廃止予定
----------------------------------------

.. Deprecated; Use --engine-failure-retry instead of --engine-refresh-retry "<number>". The default number is 3 retries.

廃止予定； ``--engine-failure-retry "数値"`` の代わりに ``--engine-failure-retry`` を使います。デフォルトは 3 です。

.. --heartbeat — Period between each heartbeat

``--heartbeat`` - ハートビート間隔
----------------------------------------

.. Use --heartbeat "<interval>s" to specify the interval, in seconds, between heartbeats the manager sends to the primary manager. These heartbeats indicate that the manager is healthy and reachable. By default, the interval is 60 seconds.

``--heartbeat "<間隔>s"`` を使い、マネージャとプライマリ・マネージャ間のハードビート間隔を秒単位で指定します。ハードビートとはマネージャが正常で到達可能であるかを確認します。デフォルトでは、この間隔は 60 秒です。

.. --api-enable-cors, --cors — Enable CORS headers in the remote API

``--api-enable-cors`` , ``--cors`` - リモート API の CORS ヘッダを有効化
------------------------------------------------------------------------

.. Use --api-enable-cors or --cors to enable cross-origin resource sharing (CORS) headers in the remote API.

``--api-remote-cors`` か ``--cors`` を使い CORS (cross-origin resource sharing) ヘッダをリモート API に入れます。

.. --cluster-driver, -c — Cluster driver to use

``--cluster-driver`` , ``-c`` - 使用するクラスタ・ドライバ
------------------------------------------------------------

.. Use --cluster-driver "<driver>", -c "<driver>" to specify a cluster driver to use. Where <driver> is one of the following:

``--cluster-driver "ドライバ"`` か ``-c "<ドライバ>"`` を使い、使用するクラスタ・ドライバを指定します。 ``<ドライバ>`` に指定できるのは、以下のどちらかです。

..    swarm is the Docker Swarm driver.
    mesos-experimental is the Mesos cluster driver.

* ``swarm`` は Docker Swarm ドライバです。
* ``mesos-experimental`` は Mesos クラスタ・ドライバです。

.. By default, the driver is swarm.

デフォルトは ``swarm`` ドライバです。

.. For more information about using Mesos driver, see Using Docker Swarm and Mesos.

Mesos ドライバの利用に関する詳しい情報は、 `Using Docker Swarm and Mesos <https://github.com/docker/swarm/blob/master/cluster/mesos/README.md>`_ をご覧ください。

.. --cluster-opt — Cluster driver options

``--cluster-opt`` - クラスタ・ドライバのオプション
--------------------------------------------------

.. You can enter multiple cluster driver options, like this:

複数のクラスタ・ドライバのオプションを ``--cluster-opt <値> --cluster-opt <値>`` のような形式で指定できます。

.. Where <value> is one of the following:

``<値>`` の場所に入る項目は以下の通りです：

..     swarm.overcommit=0.05 — Set the fractional percentage by which to overcommit resources. The default value is 0.05, or 5 percent.
    swarm.createretry=0 — Specify the number of retries to attempt when creating a container fails. The default value is 0 retries.
    mesos.address= — Specify the Mesos address to bind on. The environment variable for this option is $SWARM_MESOS_ADDRESS.
    mesos.checkpointfailover=false — Enable Mesos checkpointing, which allows a restarted slave to reconnect with old executors and recover status updates, at the cost of disk I/O. The environment variable for this option is $SWARM_MESOS_CHECKPOINT_FAILOVER. The default value is false (disabled).
    mesos.port= — Specify the Mesos port to bind on. The environment variable for this option is $SWARM_MESOS_PORT.
    mesos.offertimeout=30s — Specify the Mesos timeout for offers, in seconds. The environment variable for this option is $SWARM_MESOS_OFFER_TIMEOUT. The default value is 30s.
    mesos.offerrefusetimeout=5s — Specify timeout for Mesos to consider unused resources refused, in seconds. The environment variable for this option is $SWARM_MESOS_OFFER_REFUSE_TIMEOUT. The default value is 5s.
    mesos.tasktimeout=5s — Specify the timeout for Mesos task creation, in seconds. The environment variable for this option is $SWARM_MESOS_TASK_TIMEOUT. The default value is 5s.
    mesos.user= — Specify the Mesos framework user name. The environment variable for this option is $SWARM_MESOS_USER.

* ``swarm.overcommit=0.05``- リソースをオーバー・コミットする割合（パーセント）を指定します。デフォルト値は ``0.05`` であり、５パーセントを意味します。
* ``swarm.createretry=0`` - コンテナ作成に何度失敗すると障害とみなすかを指定します。デフォルトの値は ``0`` 回の再試行です。
* ``mesos.address=`` - バインドする Mesos のアドレスを指定します。このオプションは環境変数 ``$SWARM_MESOS_ADDRESS`` でも指定できます。
* ``mesos.checkpointfailover=false`` - Mesos のチェックポインティング（checkpointing）を有効化します。これは、以前まで使っていたエクゼキュータの状態が復旧したら、スレーブが再接続できるようにします。この時、ディスク I/O を消費します。このオプションは環境変数 ``$SWARM_MESOS_CHECKPOINT_FAILOVER`` でも指定できます。デフォルト値は ``false`` （無効）です。
* ``mesos.port=`` - Mesos がバインドするポートを指定します。このオプションは環境変数 ``$SWARM_MESOS_PORT`` でも指定できます。
* ``mesos.offertimeout=30s`` - Mesos がタイムアウトと判断する秒を指定します。このオプションは環境変数 ``$SWARM_MESOS_OFFER_TIMEOUT`` でも指定できます。デフォルトの値は ``30s`` です。
* ``mesos.offerrefusetimeout=5s`` - Mesos がリソースの再利用ができないと判断する秒を指定します。このオプションは環境変数 ``$SWARM_MESOS_OFFER_REFUSE_TIMEOUT`` でも指定できます。デフォルトの値は ``5s`` です。
* ``mesos.tasktimeout=5s`` - Mesos のタスク作成までのタイムアウトを秒で指定します。このオプションは環境変数 ``$SWARM_MESOS_TASK_TIMEOUT`` でも指定できます。デフォルトの値は ``5s`` です。
* ``mesos.user=`` - Mesos フレームワークのユーザ名を指定します。このオプションは環境変数 ``$SWARM_MESOS_USER`` でも指定できます。

.. --discovery-opt — Discovery options

``--discovery-opt`` - ディスカバリ・オプション
--------------------------------------------------

.. Use --discovery-opt <value> to discovery options, such as paths to the TLS files; the CA’s public key certificate, the certificate, and the private key of the distributed K/V store on a Consul or etcd discovery backend. You can enter multiple discovery options. For example:

``--discovery-opt <値>`` を使いディスカバリオプションを指定します。これには Consul や etcd ディスカバリ・サービスが使用する TLS ファイル（CA 公開鍵証明書、証明書、プライベート鍵）の指定も含みます。ディスカバリ・オプションは何度も指定できます。例：

.. code-block:: bash

   --discovery-opt kv.cacertfile=/path/to/mycacert.pem \
   --discovery-opt kv.certfile=/path/to/mycert.pem \
   --discovery-opt kv.keyfile=/path/to/mykey.pem \

.. For more information, see Use TLS with distributed key/value discovery

より詳しい情報は :doc:`/swarm/discovery` をご覧ください。

.. seealso:: 

   manage — Create a Swarm manager
      https://docs.docker.com/swarm/reference/manage/
